{
  "_from": "@react-native-community/picker@^1.1.2",
  "_id": "@react-native-community/picker@1.1.2",
  "_inBundle": false,
  "_integrity": "sha512-0bw1VmAt9q3aEIXnaELqkrFNEtuoIvok/JVG0SDoMIPrDGpv8YL7KMlGqu/kw8Zi52du/rTSx7Avv9Bc5mIJ9w==",
  "_location": "/@react-native-community/picker",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@react-native-community%2fpicker",
    "fetchSpec": "^1.1.2",
    "name": "@react-native-community/picker",
    "raw": "@react-native-community/picker@^1.1.2",
    "rawSpec": "^1.1.2",
    "registry": true,
    "saveSpec": null,
    "scope": "@react-native-community",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@react-native-community/picker/-/picker-1.1.2.tgz",
  "_shasum": "f6f8a0c7a3ec4bbf2cb9c05813e32ddfa090ce00",
  "_spec": "@react-native-community/picker@^1.1.2",
  "_where": "/Users/AbdulazizSaud/Documents/Dev/expo/bqq",
  "author": "",
  "bugs": {
    "url": "https://github.com/react-native-community/react-native-picker/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "React Native Picker for iOS & Android",
  "detox": {
    "configurations": {
      "android.emu.debug": {
        "binaryPath": "example/android/app/build/outputs/apk/debug/app-debug.apk",
        "build": "export RCT_NO_LAUNCH_PACKAGER=true && pushd example/android && ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug && popd",
        "name": "TestingAVD",
        "type": "android.emulator"
      },
      "android.emu.release": {
        "binaryPath": "example/android/app/build/outputs/apk/release/app-release.apk",
        "build": "export RCT_NO_LAUNCH_PACKAGER=true && pushd example/android && ./gradlew assembleRelease assembleAndroidTest -DtestBuildType=release && popd",
        "name": "TestingAVD",
        "type": "android.emulator"
      },
      "ios.sim.debug": {
        "binaryPath": "example/ios/build/Build/Products/Debug-iphonesimulator/PickerExample.app",
        "build": "export RCT_NO_LAUNCH_PACKAGER=true && xcodebuild -project example/ios/PickerExample.xcodeproj -destination 'platform=iOS Simulator,name=iPhone X' -scheme PickerExample -parallelizeTargets -configuration Debug -derivedDataPath example/ios/build  -UseModernBuildSystem=YES | xcpretty -k",
        "name": "iPhone X",
        "type": "ios.simulator"
      },
      "ios.sim.release": {
        "binaryPath": "example/ios/build/Build/Products/Release-iphonesimulator/PickerExample.app",
        "build": "export RCT_NO_LAUNCH_PACKAGER=true && xcodebuild -project example/ios/PickerExample.xcodeproj -destination 'platform=iOS Simulator,name=iPhone X' -scheme PickerExample -parallelizeTargets -configuration Release -derivedDataPath example/ios/build  -UseModernBuildSystem=YES | xcpretty -k",
        "name": "iPhone X",
        "type": "ios.simulator"
      }
    },
    "runner-config": "example/e2e/config.json",
    "test-runner": "jest"
  },
  "devDependencies": {
    "@babel/core": "^7.4.3",
    "@react-native-community/eslint-config": "^0.0.5",
    "@semantic-release/git": "7.0.8",
    "babel-core": "^7.0.0-bridge.0",
    "babel-jest": "^24.7.0",
    "babel-plugin-module-resolver": "^3.2.0",
    "detox": "^12.1.2",
    "eslint": "^5.16.0",
    "eslint-plugin-prettier": "^3.0.1",
    "flow-bin": "^0.86.0",
    "husky": "^2.2.0",
    "jest": "24.7.0",
    "metro-react-native-babel-preset": "0.51.1",
    "prettier": "^1.17.0",
    "pretty-quick": "^1.10.0",
    "react": "16.6.3",
    "react-native": "0.58.4",
    "react-test-renderer": "16.6.3",
    "rimraf": "^2.6.3",
    "semantic-release": "15.13.3",
    "typescript": "^3.4.1"
  },
  "homepage": "https://github.com/react-native-community/react-native-picker#readme",
  "husky": {
    "hooks": {
      "pre-commit": "pretty-quick --staged"
    }
  },
  "jest": {
    "preset": "react-native",
    "setupFilesAfterEnv": [
      "<rootDir>/jest.setup.js"
    ]
  },
  "keywords": [
    "dropdown",
    "picker",
    "react native",
    "react-native",
    "select"
  ],
  "license": "MIT",
  "main": "js/index.js",
  "name": "@react-native-community/picker",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^16.0",
    "react-native": ">=0.57 <=0.59"
  },
  "private": false,
  "readme": "\n#  `@react-native-community/picker`\n\n[![CircleCI Status](https://img.shields.io/circleci/project/github/react-native-community/react-native-picker/master.svg)](https://circleci.com/gh/react-native-community/workflows/react-native-picker/tree/master) ![Supports Android and iOS](https://img.shields.io/badge/platforms-android%20|%20ios-lightgrey.svg) ![MIT License](https://img.shields.io/npm/l/@react-native-community/picker.svg)\n\n<img src=\"./screenshots/picker-android.png\" width=\"150\">\n<img src=\"./screenshots/picker-ios.png\" width=\"150\">\n<img src=\"./screenshots/pickerios-ios.png\" width=\"150\">\n\n## Getting started\n\n`$ npm install @react-native-community/picker --save`\n\n### Mostly automatic installation\n\n`$ react-native link @react-native-community/picker`\n\n### Manual installation\n\n\n#### iOS\n\n1. In XCode, in the project navigator, right click `Libraries` ➜ `Add Files to [your project's name]`\n2. Go to `node_modules` ➜ ` @react-native-community/picker` and add `RNCPicker.xcodeproj`\n3. In XCode, in the project navigator, select your project. Add `libRNCPicker.a` to your project's `Build Phases` ➜ `Link Binary With Libraries`\n4. Run your project (`Cmd+R`)<\n\n#### Android\n\n1. Open up `android/app/src/main/java/[...]/MainActivity.java`\n  - Add `import com.reactnativecommunity.picker.RNCPickerPackage;` to the imports at the top of the file\n  - Add `new RNCPickerPackage()` to the list returned by the `getPackages()` method\n2. Append the following lines to `android/settings.gradle`:\n  \t```\n  \tinclude ': @react-native-community/picker'\n  \tproject(': @react-native-community/picker').projectDir = new File(rootProject.projectDir, \t'../node_modules/ @react-native-community/picker/android')\n  \t```\n3. Insert the following lines inside the dependencies block in `android/app/build.gradle`:\n  \t```\n      compile project(': @react-native-community/picker')\n  \t```\n\n\n## Usage\n### Picker\n\nRenders the native picker component on iOS and Android. Example:\n\n#### Usage\n\nImport Picker from `@react-native-community/picker`\n\n```javascript\nimport {Picker} from '@react-native-community/picker';\n```\n\nCreate state which will be used by the `Picker`\n\n```javascript\nstate = {\n  language: 'java',\n};\n```\n\nAdd `Picker` like this:\n```javascript\n<Picker\n  selectedValue={this.state.language}\n  style={{height: 50, width: 100}}\n  onValueChange={(itemValue, itemIndex) =>\n    this.setState({language: itemValue})\n  }>\n  <Picker.Item label=\"Java\" value=\"java\" />\n  <Picker.Item label=\"JavaScript\" value=\"js\" />\n</Picker>\n```\n\n### Props\n\n* [Inherited `View` props...](https://facebook.github.io/react-native/docs/view#props)\n\n- [`onValueChange`](#onvaluechange)\n- [`selectedValue`](#selectedvalue)\n- [`style`](#style)\n- [`testID`](#testid)\n- [`enabled`](#enabled)\n- [`mode`](#mode)\n- [`prompt`](#prompt)\n- [`itemStyle`](#itemstyle)\n\n---\n\n# Reference\n\n## Props\n\n### `onValueChange`\n\nCallback for when an item is selected. This is called with the following parameters:\n\n* `itemValue`: the `value` prop of the item that was selected\n* `itemPosition`: the index of the selected item in this picker\n\n| Type     | Required |\n| -------- | -------- |\n| function | No       |\n\n---\n\n### `selectedValue`\n\nValue matching value of one of the items. Can be a string or an integer.\n\n| Type | Required |\n| ---- | -------- |\n| any  | No       |\n\n---\n\n### `style`\n\n| Type            | Required |\n| --------------- | -------- |\n| pickerStyleType | No       |\n\n---\n\n### `testID`\n\nUsed to locate this view in end-to-end tests.\n\n| Type   | Required |\n| ------ | -------- |\n| string | No       |\n\n---\n\n### `enabled`\n\nIf set to false, the picker will be disabled, i.e. the user will not be able to make a selection.\n\n| Type | Required | Platform |\n| ---- | -------- | -------- |\n| bool | No       | Android  |\n\n---\n\n### `mode`\n\nOn Android, specifies how to display the selection items when the user taps on the picker:\n\n* 'dialog': Show a modal dialog. This is the default.\n* 'dropdown': Shows a dropdown anchored to the picker view\n\n| Type                       | Required | Platform |\n| -------------------------- | -------- | -------- |\n| enum('dialog', 'dropdown') | No       | Android  |\n\n---\n\n### `prompt`\n\nPrompt string for this picker, used on Android in dialog mode as the title of the dialog.\n\n| Type   | Required | Platform |\n| ------ | -------- | -------- |\n| string | No       | Android  |\n\n---\n\n### `itemStyle`\n\nStyle to apply to each of the item labels.\n\n| Type                               | Required | Platform |\n| ---------------------------------- | -------- | -------- |\n| [text styles](https://facebook.github.io/react-native/docs/text-style-props) | No       | iOS      |\n\n### PickerIOS\n### Props\n\n* [Inherited `View` props...](https://facebook.github.io/react-native/docs/view#props)\n\n- [`itemStyle`](#itemstyle)\n- [`onValueChange`](#onvaluechange)\n- [`selectedValue`](#selectedvalue)\n\n---\n\n# Reference\n\n## Props\n\n### `itemStyle`\n\n| Type                               | Required |\n| ---------------------------------- | -------- |\n| [text styles](https://facebook.github.io/react-native/docs/text-style-props) | No       |\n\n---\n\n### `onValueChange`\n\n| Type     | Required |\n| -------- | -------- |\n| function | No       |\n\n---\n\n### `selectedValue`\n\n| Type | Required |\n| ---- | -------- |\n| any  | No       |\n\n  \n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/react-native-community/react-native-picker.git"
  },
  "scripts": {
    "ci:publish": "yarn semantic-release",
    "semantic-release": "semantic-release",
    "start": "react-native start",
    "test": "yarn validate:eslint && yarn validate:flow && yarn validate:typescript && yarn test:jest",
    "test:detox:android:build:debug": "detox build -c android.emu.debug",
    "test:detox:android:build:release": "detox build -c android.emu.release",
    "test:detox:android:bundle:release": "mkdir -p .tmp && react-native bundle --max-workers 4 --platform android --dev false --entry-file example/index.js --bundle-output .tmp/android-bundle.js",
    "test:detox:android:test:debug": "detox test -c android.emu.debug",
    "test:detox:android:test:release": "detox test -c android.emu.release",
    "test:detox:clean": "rimraf example/android/build && rimraf example/android/app/build && rimraf example/android/.gradle && rimraf example/ios/build",
    "test:detox:ios:build:debug": "detox build -c ios.sim.debug",
    "test:detox:ios:build:release": "detox build -c ios.sim.release",
    "test:detox:ios:bundle:release": "mkdir -p .tmp && react-native bundle --max-workers 4 --platform ios --dev false --entry-file example/index.js --bundle-output .tmp/ios-bundle.js",
    "test:detox:ios:test:debug": "detox test -c ios.sim.debug",
    "test:detox:ios:test:release": "detox test -c ios.sim.release",
    "test:jest": "jest js/",
    "validate:eslint": "eslint 'js/**/*.js' 'example/**/*.js'",
    "validate:flow": "flow check",
    "validate:typescript": "tsc --project ./"
  },
  "version": "1.1.2"
}
